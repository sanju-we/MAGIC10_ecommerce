<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
        <style>
            /* General Styling */
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }

            :root {
                --primary-color: #3498db;
                --secondary-color: #2c3e50;
                --success-color: #2ecc71;
                --danger-color: #e74c3c;
                --info-color: #3498db;
                --light-gray: #ecf0f1;
            }

            .error-message {
                color: red;
                font-size: 0.875rem;
            }

            /* Main Section Styling */
            .content-main {
                padding: 3rem 2rem;
            }

            .content-header {
                margin-bottom: 2rem;
            }

            .content-title {
                font-size: 2rem;
                font-weight: bold;
            }

            /* Form Styling */
            .form-container {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 2rem;
            }

            .form-group {
                margin-bottom: 1.5rem;
            }

            .form-group label {
                font-weight: 600;
                font-size: 1.1rem;
                margin-bottom: 0.5rem;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 0.75rem;
                font-size: 1rem;
                border-radius: 8px;
                border: 1px solid #ddd;
            }

            .form-group input[type="number"] {
                -moz-appearance: textfield;
            }

            .form-group select {
                cursor: pointer;
            }

            .form-actions {
                display: flex;
                justify-content: flex-start;
                margin-top: 1.5rem;
                gap: 1rem;
            }

            .form-actions button {
                background-color: #007bff;
                color: white;
                padding: 0.75rem 1.5rem;
                font-size: 1.125rem;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }

            .form-actions button:hover {
                background-color: #0056b3;
            }

            /* Variants Section */
            .variants-section {
                margin-bottom: 2rem;
            }

            .variant-entry {
                display: flex;
                gap: 1rem;
                margin-bottom: 1rem;
                padding: 1rem;
                background: #f5f7fa;
                border-radius: 8px;
                border: 1px solid #ddd;
            }

            .variant-entry input {
                flex: 1;
                padding: 0.5rem;
                border-radius: 4px;
                border: 1px solid #ddd;
            }

            .variant-entry button {
                background-color: #e74c3c;
                color: white;
                padding: 0.5rem 1rem;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

            .variant-entry button:hover {
                background-color: #c0392b;
            }

            .add-variant-btn {
                background-color: #2ecc71;
                color: white;
                padding: 0.5rem 1rem;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

            .add-variant-btn:hover {
                background-color: #27ae60;
            }

            /* Image Preview Styling */
            .image-upload-container {
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }

            .image-preview {
                max-width: 100%;
                max-height: 200px;
                border: 1px solid #ddd;
                margin-top: 10px;
                border-radius: 8px;
            }

            .thumbnail {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .thumbnail img {
                width: 50px;
                height: 50px;
                object-fit: cover;
                border-radius: 50%;
                margin-right: 10px;
            }
        </style>
    </head>

    <section class="content-main">
        <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
        </div>
        <form id="productForm">
            <div class="form-container">
                <!-- Product Details -->
                <div class="form-group">
                    <label for="product_name">Product Name</label>
                    <input type="text" name="productName" id="product_name" placeholder="Enter product name">
                    <div id="productName-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="descriptionid">Short Description</label>
                    <textarea id="descriptionid" name="description" rows="4"
                        placeholder="Enter product short description"></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="fulldescriptionid">Full Description</label>
                    <textarea id="fulldescriptionid" name="fullDescription" rows="4"
                        placeholder="Enter product full description"></textarea>
                    <div id="fullDescription-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="brand">Brand</label>
                    <input type="text" name="brand" id="brand" placeholder="Enter brand">
                    <div id="brand-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="regularPrice">Regular Price</label>
                    <input type="number" name="regularPrice" id="regularPrice" step="0.01"
                        placeholder="Enter regular price">
                    <div id="regularPrice-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="salePrice">Sale Price</label>
                    <input type="number" name="salePrice" id="salePrice" step="0.01" placeholder="Enter sale price">
                    <div id="salePrice-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="stock">Stock (Base)</label>
                    <input type="number" name="stock" id="stock" placeholder="Enter base stock">
                    <div id="stock-error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="category">Category</label>
                    <select name="category" id="category" placeholder="sdfhsd">
                        <option value="Select Category">Select Category</option>
                        <% for (let i=0; i < cat.length; i++) { %>
                            <option value="<%= cat[i].name %>">
                                <%= cat[i].name %>
                            </option>
                            <% } %>
                    </select>
                    <div id="category-error" class="error-message"></div>
                </div>
            </div>

            <!-- Variants Section -->
            <div class="variants-section">
                <h3>Add Variants</h3>
                <div id="variants-container"></div>
                <button type="button" class="add-variant-btn" onclick="addVariant()">Add Variant</button>
                <input type="hidden" name="variants" id="variants-input">
            </div>

            <!-- Image Upload Section -->
            <div class="image-upload-container">
                <% for (let i=0; i < 4; i++) { %>
                    <div class="image-upload-group">
                        <label for="image<%= i %>">Image <%= i+1 %></label>
                        <input type="file" name="image<%= i %>" id="image<%= i %>" class="form-control" accept="image/*"
                            onchange="previewImage(event, <%= i %>)">
                        <img id="preview<%= i %>" src="#" alt="Image preview" class="image-preview"
                            style="display: none;">
                        <button type="button" class="btn btn-primary mt-2" onclick="cropImage(<%= i %>)">Save Image <%=
                                i+1 %></button>
                        <div id="image<%= i %>-error" class="error-message"></div>
                        <div class="croppedPreview<%= i %>"></div>
                    </div>
                    <% } %>
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
                <button type="submit">Publish Product</button>
            </div>
        </form>
    </section>

    <!-- <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    <script>
        let croppers = {};
        let variantCounter = 0;
        let variants = [];

        function addVariant() {
            variantCounter++;
            const variantsContainer = document.getElementById('variants-container');
            const variantEntry = document.createElement('div');
            variantEntry.className = 'variant-entry';
            variantEntry.id = `variant-${variantCounter}`;

            variantEntry.innerHTML = `
                <input type="text" placeholder="Size" class="variant-size" required>
                <input type="text" placeholder="Color" class="variant-color" required>
                <input type="number" placeholder="Price" class="variant-price" min="0" step="0.01" required>
                <input type="number" placeholder="Stock" class="variant-stock" min="0" required>
                <button type="button" onclick="removeVariant(${variantCounter})">Remove</button>
            `;

            variantsContainer.appendChild(variantEntry);
        }

        function removeVariant(id) {
            const variantEntry = document.getElementById(`variant-${id}`);
            if (variantEntry) {
                variantEntry.remove();
                updateVariantsInput();
            }
        }

        function updateVariantsInput() {
            const variantEntries = document.querySelectorAll('.variant-entry');
            const variants = [];

            variantEntries.forEach(entry => {
                const size = entry.querySelector('.variant-size').value.trim();
                const color = entry.querySelector('.variant-color').value.trim();
                const price = parseFloat(entry.querySelector('.variant-price').value);
                const stock = parseInt(entry.querySelector('.variant-stock').value);

                if (size && color && !isNaN(price) && !isNaN(stock)) {
                    variants.push({
                        size: size,
                        color: color,
                        price: price,
                        stock: stock
                    })
                }
            });

            document.getElementById('variants-input').value = JSON.stringify(variants);
            return variants;
        }

        function previewImage(event, index) {
            const input = event.target;
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const preview = document.getElementById(`preview${index}`);
                    if (!preview) {
                        console.error(`Preview element for index ${index} not found.`);
                        return;
                    }

                    preview.src = e.target.result;
                    preview.style.display = 'block';

                    preview.onload = function () {
                        try {
                            if (croppers[index]) {
                                croppers[index].destroy();
                            }

                            croppers[index] = new Cropper(preview, {
                                aspectRatio: 1,
                                viewMode: 1,
                                autoCropArea: 0.8,
                                movable: true,
                                zoomable: true,
                                scalable: true,
                                rotatable: true,
                                ready: function () {
                                    console.log(`Cropper initialized for image ${index}`);
                                }
                            });
                        } catch (error) {
                            console.error(`Error initializing Cropper for image ${index}:`, error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to initialize image cropper.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    };

                    preview.onerror = function () {
                        console.error(`Error loading image for preview${index}`);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to load the image for cropping.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    };
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        function cropImage(index) {
            if (!croppers[index]) {
                console.error(`No cropper found for index ${index}`);
                Swal.fire({
                    title: 'Error!',
                    text: 'Please select an image first.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            try {
                const canvas = croppers[index].getCroppedCanvas({
                    width: 300,
                    height: 300,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high'
                });

                if (!canvas) {
                    throw new Error('Failed to crop the image.');
                }

                const croppedImageUrl = canvas.toDataURL('image/jpeg');

                const croppedPreviewContainer = document.querySelector(`.croppedPreview${index}`);

                if (!croppedPreviewContainer) {
                    console.error(`Container .croppedPreview${index} not found`);
                    return;
                }

                croppedPreviewContainer.innerHTML = '';

                const croppedPreview = document.createElement('img');
                croppedPreview.className = 'cropped-preview';
                croppedPreview.src = croppedImageUrl;
                croppedPreview.style.display = 'block';

                croppedPreview.setAttribute('data-image-url', croppedImageUrl);

                croppedPreviewContainer.appendChild(croppedPreview);

                console.log(`Image ${index} cropped successfully`);

                Swal.fire({
                    title: 'Success!',
                    text: 'Image cropped successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });

            } catch (error) {
                console.error(`Error cropping image ${index}:`, error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to crop the image.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }


        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("productForm");

            form.addEventListener("submit", async function (event) {
                event.preventDefault();
                let isValid = true;

                const productName = document.getElementById("product_name").value.trim();
                const description = document.getElementById("descriptionid").value.trim();
                const fullDescription = document.getElementById("fulldescriptionid").value.trim();
                const brand = document.getElementById("brand").value.trim();
                const regularPrice = parseFloat(document.getElementById("regularPrice").value);
                const salePrice = parseFloat(document.getElementById("salePrice").value);
                const stock = parseInt(document.getElementById("stock").value);
                const category = document.getElementById("category").value;

                document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

                if (!productName) {
                    document.getElementById("productName-error").textContent = "Product name is required";
                    isValid = false;
                }

                if (!description) {
                    document.getElementById("description-error").textContent = "Description is required";
                    isValid = false;
                }

                if (!fullDescription) {
                    document.getElementById("fullDescription-error").textContent = "Full description is required";
                    isValid = false;
                }

                if (salePrice >= regularPrice) {
                    document.getElementById("salePrice-error").textContent = "Sale price must be lower than the regular price.";
                    isValid = false;
                }


                if (!brand) {
                    document.getElementById("brand-error").textContent = "Brand is required";
                    isValid = false;
                }

                if (isNaN(regularPrice) || regularPrice <= 0) {
                    document.getElementById("regularPrice-error").textContent = "Regular price must be a positive number";
                    isValid = false;
                }

                if (isNaN(salePrice) || salePrice <= 0) {
                    document.getElementById("salePrice-error").textContent = "Sale price must be a positive number";
                    isValid = false;
                }

                if (isNaN(stock) || stock < 0) {
                    document.getElementById("stock-error").textContent = "Stock must be a non-negative number";
                    isValid = false;
                }

                if (!category) {
                    document.getElementById("category-error").textContent = "Please select a category";
                    isValid = false;
                }

                const variants = updateVariantsInput();
                if (variants.length === 0) {
                    Swal.fire({
                        title: 'Warning!',
                        text: 'Please add at least one variant.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    });
                    isValid = false;
                }

                if (isValid) {
                    console.log("Form is valid, submitting...");
                    console.log("Variants:", variants);

                    const formData = new FormData();

                    formData.append("productName", productName);
                    formData.append("description", description);
                    formData.append("fullDescription", fullDescription);
                    formData.append("brand", brand);
                    formData.append("regularPrice", regularPrice);
                    formData.append("salePrice", salePrice);
                    formData.append("stock", stock);
                    formData.append("category", category);
                    formData.append("variants", JSON.stringify(variants));

                    function dataURLtoBlob(dataURL) {
                        const parts = dataURL.split(';base64,');
                        const contentType = parts[0].split(':')[1];
                        const raw = window.atob(parts[1]);
                        const rawLength = raw.length;
                        const uInt8Array = new Uint8Array(rawLength);

                        for (let i = 0; i < rawLength; ++i) {
                            uInt8Array[i] = raw.charCodeAt(i);
                        }

                        return new Blob([uInt8Array], { type: contentType });
                    }


                    for (let i = 0; i < 4; i++) {
                        const container = document.querySelector(`.croppedPreview${i}`);
                        if (container) {
                            const img = container.querySelector('img');
                            if (img && img.getAttribute('data-image-url')) {
                                const dataURL = img.getAttribute('data-image-url');
                                const blob = dataURLtoBlob(dataURL);
                                formData.append(`product${i}`, blob, `image${i}.jpg`);
                                console.log(`Added image ${i} to form data`);
                            } else {
                                console.log(`No cropped image found for index ${i}`);
                            }
                        }
                    }
                    console.log(Object.fromEntries(formData))

                    try {
                        const resp = await fetch("/admin/addProducts", {
                            method: "POST",
                            body: formData
                        })

                        if (resp.success) {
                            const data = await resp.json()
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            })
                            window.location.reload()
                            console.log('data:',data)
                        }
                    } catch (err) {
                        console.log(err)
                    }

                }
            });

            addVariant();
        });

    </script>

    <%- include("../../views/partials/admin/footer") %>